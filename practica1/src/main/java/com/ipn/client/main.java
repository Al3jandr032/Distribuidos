package com.ipn.client;

import com.ipn.server.Server;
import com.ipn.vo.Alumno;
import com.ipn.vo.Asignacion;
import com.ipn.vo.AsignacionPK;
import com.ipn.vo.Curso;
import com.ipn.vo.CursoAlumno;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author alopeze
 */
public class main extends javax.swing.JFrame {

    /**
     * Creates new form main
     */
    public main() {
        
        model = new DefaultTableModel(new String[]{"id","nombre","apellidos","email"},0);
        initComponents();
        this.jTable1.setModel(model);
        cursoalumno = new HashMap<>();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jMenuBar2 = new javax.swing.JMenuBar();
        jMenu3 = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();
        jMenu5 = new javax.swing.JMenu();
        jMenu6 = new javax.swing.JMenu();
        jMenu7 = new javax.swing.JMenu();
        jMenu8 = new javax.swing.JMenu();
        jMenu9 = new javax.swing.JMenu();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        exitMenuItem = new javax.swing.JMenuItem();
        crearMenu = new javax.swing.JMenu();
        alumnoCrearMenu = new javax.swing.JMenuItem();
        cursoCrearMenu = new javax.swing.JMenuItem();
        asigancionCrearMenu = new javax.swing.JMenuItem();
        editarJmenu = new javax.swing.JMenu();
        AlumnoEditarMenu = new javax.swing.JMenuItem();
        CursoEditarMenu = new javax.swing.JMenuItem();
        AsignacionEditarMenu = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        cutMenuItem = new javax.swing.JMenuItem();
        copyMenuItem = new javax.swing.JMenuItem();
        pasteMenuItem = new javax.swing.JMenuItem();
        listarMenu = new javax.swing.JMenu();
        listarAlumno = new javax.swing.JMenuItem();
        listarCurso = new javax.swing.JMenuItem();
        asignacionListar = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        aboutMenuItem = new javax.swing.JMenuItem();

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        jMenu3.setText("File");
        jMenuBar2.add(jMenu3);

        jMenu4.setText("Edit");
        jMenuBar2.add(jMenu4);

        jMenu5.setText("jMenu5");

        jMenu6.setText("jMenu6");

        jMenu7.setText("jMenu7");

        jMenu8.setText("jMenu8");

        jMenu9.setText("jMenu9");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        fileMenu.setMnemonic('f');
        fileMenu.setText("Archivo");

        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Salir");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        crearMenu.setText("Crear");

        alumnoCrearMenu.setText("Alumnos");
        alumnoCrearMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                alumnoCrearMenuActionPerformed(evt);
            }
        });
        crearMenu.add(alumnoCrearMenu);

        cursoCrearMenu.setText("Cursos");
        cursoCrearMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cursoCrearMenuActionPerformed(evt);
            }
        });
        crearMenu.add(cursoCrearMenu);

        asigancionCrearMenu.setText("Asignaciones");
        asigancionCrearMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                asigancionCrearMenuActionPerformed(evt);
            }
        });
        crearMenu.add(asigancionCrearMenu);

        menuBar.add(crearMenu);

        editarJmenu.setText("Editar");

        AlumnoEditarMenu.setText("Alumnos");
        AlumnoEditarMenu.setEnabled(false);
        AlumnoEditarMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AlumnoEditarMenuActionPerformed(evt);
            }
        });
        editarJmenu.add(AlumnoEditarMenu);

        CursoEditarMenu.setText("Cursos");
        CursoEditarMenu.setEnabled(false);
        CursoEditarMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CursoEditarMenuActionPerformed(evt);
            }
        });
        editarJmenu.add(CursoEditarMenu);

        AsignacionEditarMenu.setText("Asignaciones");
        AsignacionEditarMenu.setEnabled(false);
        AsignacionEditarMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AsignacionEditarMenuActionPerformed(evt);
            }
        });
        editarJmenu.add(AsignacionEditarMenu);

        menuBar.add(editarJmenu);

        editMenu.setMnemonic('e');
        editMenu.setText("Eliminar");

        cutMenuItem.setMnemonic('t');
        cutMenuItem.setText("Alumnos");
        cutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cutMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(cutMenuItem);

        copyMenuItem.setMnemonic('y');
        copyMenuItem.setText("Cursos");
        copyMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(copyMenuItem);

        pasteMenuItem.setMnemonic('p');
        pasteMenuItem.setText("Asignaciones");
        pasteMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pasteMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(pasteMenuItem);

        menuBar.add(editMenu);

        listarMenu.setText("Listar");

        listarAlumno.setText("Alumno");
        listarAlumno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listarAlumnoActionPerformed(evt);
            }
        });
        listarMenu.add(listarAlumno);

        listarCurso.setText("Curso");
        listarCurso.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listarCursoActionPerformed(evt);
            }
        });
        listarMenu.add(listarCurso);

        asignacionListar.setText("Asignacion");
        asignacionListar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                asignacionListarActionPerformed(evt);
            }
        });
        listarMenu.add(asignacionListar);

        menuBar.add(listarMenu);

        helpMenu.setMnemonic('h');
        helpMenu.setText("Help");

        aboutMenuItem.setMnemonic('a');
        aboutMenuItem.setText("Acerca de");
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(31, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(133, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void cutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cutMenuItemActionPerformed
    //Eliminar alumnos
    boolean succesful = true;
        if (this.jTable1.getModel().getRowCount() > 0) {
            int index = this.jTable1.getSelectedRow();
            Integer id = (Integer) model.getValueAt(index, 0);
            System.out.println("id a borrar : " + id);
            Alumno a = new Alumno(id);
            try (Socket socket = new Socket("127.0.0.1", Server.PORT)) {
                ObjectOutputStream dos = new ObjectOutputStream(socket.getOutputStream());
                ObjectInputStream is = new ObjectInputStream(socket.getInputStream());
                
                dos.writeInt(Server.ALUMNO);
                dos.writeInt(Server.REMOVE);
                dos.writeObject(a);
                dos.flush();
                dos.close();
                
            } catch (IOException ex) {
                System.out.println(ex.getMessage());
                System.out.println(ex.getClass());
                System.out.println(ex.getCause());
                succesful = false;
            } finally {
                if (succesful) {
                    this.model.removeRow(index);
                }
            }
        }
    }//GEN-LAST:event_cutMenuItemActionPerformed

    private void copyMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyMenuItemActionPerformed
        
    }//GEN-LAST:event_copyMenuItemActionPerformed

    private void pasteMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pasteMenuItemActionPerformed
//        appform.setVisible(true);
    }//GEN-LAST:event_pasteMenuItemActionPerformed

    private void alumnoCrearMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_alumnoCrearMenuActionPerformed
        // TODO add your handling code here:
        appform = new Applicationform(1);
        System.out.println("crear Alumno");
        appform.setVisible(true);
        
    }//GEN-LAST:event_alumnoCrearMenuActionPerformed

    private void listarAlumnoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listarAlumnoActionPerformed
        try (Socket socket = new Socket("127.0.0.1", Server.PORT)) {
            ObjectOutputStream dos = new ObjectOutputStream(socket.getOutputStream());
            ObjectInputStream is = new ObjectInputStream(socket.getInputStream());

            dos.writeInt(Server.ALUMNO);
            dos.writeInt(Server.FIND_ALL);
            dos.flush();
            int index = is.readInt();
//            ArrayList<Object> lst = new ArrayList();
            model = new DefaultTableModel(new String[]{"id","nombre","apellidos","email"},0);
            this.jTable1.setModel(model);
            for (int i = 0; i < index; i++) {
                Alumno o = (Alumno) is.readObject();
                model.addRow(new Object[]{o.getIdAlumno(), o.getNombre(), o.getPaterno()+o.getMaterno() ,o.getEmail()});
            }

            dos.close();
        } catch (IOException ex) {
            System.out.println(ex.getMessage());
            System.out.println(ex.getClass());
            System.out.println(ex.getCause());
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);
        }finally{
            if(model.getRowCount() > 0){
                this.AlumnoEditarMenu.setEnabled(true);
                this.AsignacionEditarMenu.setEnabled(false);
                this.CursoEditarMenu.setEnabled(false);
            }
        }
    }//GEN-LAST:event_listarAlumnoActionPerformed

    private void listarCursoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listarCursoActionPerformed
        try (Socket socket = new Socket("127.0.0.1", Server.PORT)) {
            ObjectOutputStream dos = new ObjectOutputStream(socket.getOutputStream());
            ObjectInputStream is = new ObjectInputStream(socket.getInputStream());

            dos.writeInt(Server.CURSO);
            dos.writeInt(Server.FIND_ALL);
            dos.flush();
            int index = is.readInt();
//            ArrayList<Object> lst = new ArrayList();
            model = new DefaultTableModel(new String[]{"id","nombre","inicio","fin","cuota"},0);
            this.jTable1.setModel(model);
            for (int i = 0; i < index; i++) {
                Curso o = (Curso) is.readObject();
                model.addRow(new Object[]{o.getIdCurso(),o.getNombre(),o.getInicio(),o.getFin(),o.getCoutaDeRecuperacion()});
            }

            dos.close();
        } catch (IOException ex) {
            System.out.println(ex.getMessage());
            System.out.println(ex.getClass());
            System.out.println(ex.getCause());
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);
        }finally{
            if(model.getRowCount() > 0){
                this.CursoEditarMenu.setEnabled(true);
                this.AlumnoEditarMenu.setEnabled(false);
                this.AsignacionEditarMenu.setEnabled(false);
                
            }
        }
    }//GEN-LAST:event_listarCursoActionPerformed

    private void asignacionListarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_asignacionListarActionPerformed
        try (Socket socket = new Socket("127.0.0.1", Server.PORT)) {
            ObjectOutputStream dos = new ObjectOutputStream(socket.getOutputStream());
            ObjectInputStream is = new ObjectInputStream(socket.getInputStream());

            dos.writeInt(Server.ASIGNACION);
            dos.writeInt(Server.FIND_ALL_CUSTOM);
            dos.flush();
            int index = is.readInt();
//            ArrayList<Object> lst = new ArrayList();
            model = new DefaultTableModel(new String[]{"alumno","curso"},0);
            this.jTable1.setModel(model);
            for (int i = 0; i < index; i++) {
                CursoAlumno o = (CursoAlumno) is.readObject();
                model.addRow(new Object[]{o.getNombreAlumno(),o.getNombreCurso()});
                cursoalumno.put(o.getNombreAlumno()+o.getNombreCurso(),o);
            }

            dos.close();
        } catch (IOException ex) {
            System.out.println(ex.getMessage());
            System.out.println(ex.getClass());
            System.out.println(ex.getCause());
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);
        }finally{
            if(model.getRowCount() > 0){
                this.AsignacionEditarMenu.setEnabled(true);
                this.AlumnoEditarMenu.setEnabled(false);
                this.CursoEditarMenu.setEnabled(false);
            }
        }
    }//GEN-LAST:event_asignacionListarActionPerformed

    private void AlumnoEditarMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AlumnoEditarMenuActionPerformed
        boolean succesful = true;
        Alumno aux = null;
        if (this.jTable1.getModel().getRowCount() > 0) {
            int index = this.jTable1.getSelectedRow();
            Integer id = (Integer) model.getValueAt(index, 0);
            System.out.println("id a actualizar : " + id);
            
            try (Socket socket = new Socket("127.0.0.1", Server.PORT)) {
                ObjectOutputStream dos = new ObjectOutputStream(socket.getOutputStream());
                ObjectInputStream is = new ObjectInputStream(socket.getInputStream());

                dos.writeInt(Server.ALUMNO);
                dos.writeInt(Server.FIND);
                dos.writeInt(id);
                dos.flush();
                aux = (Alumno) is.readObject();
                dos.close();

            } catch (IOException ex) {
                System.out.println(ex.getMessage());
                System.out.println(ex.getClass());
                System.out.println(ex.getCause());
                succesful = false;
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
                if (succesful && aux != null) {
                    appform = new Applicationform(2);
                    System.out.println("crear Alumno");
                    appform.setAlumno(aux);
                    appform.setVisible(true);
                }
            }
        }
        
    }//GEN-LAST:event_AlumnoEditarMenuActionPerformed

    private void CursoEditarMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CursoEditarMenuActionPerformed
        // TODO add your handling code here:
        System.out.println("Editando curso ");
        boolean succesful = true;
        Curso aux = null;
        if (this.jTable1.getModel().getRowCount() > 0) {
            int index = this.jTable1.getSelectedRow();
            Integer id = (Integer) model.getValueAt(index, 0);
            System.out.println("id a editar: " + id);
            
            try (Socket socket = new Socket("127.0.0.1", Server.PORT)) {
                ObjectOutputStream dos = new ObjectOutputStream(socket.getOutputStream());
                ObjectInputStream is = new ObjectInputStream(socket.getInputStream());

                dos.writeInt(Server.CURSO);
                dos.writeInt(Server.FIND);
                dos.writeInt(id);
                dos.flush();
                aux = (Curso) is.readObject();
                dos.close();

            } catch (IOException ex) {
                System.out.println(ex.getMessage());
                System.out.println(ex.getClass());
                System.out.println(ex.getCause());
                succesful = false;
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);
            } 
            finally {
                if (succesful && aux != null) {
                    cform = new Cursoform(2);
                    System.out.println("crear Curso");
                    cform.setCurso(aux);
                    cform.setVisible(true);   
                }
            }
        }
    }//GEN-LAST:event_CursoEditarMenuActionPerformed

    private void cursoCrearMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cursoCrearMenuActionPerformed
        cform = new Cursoform(1);
        System.out.println("crear Curso");
        cform.setVisible(true);
    }//GEN-LAST:event_cursoCrearMenuActionPerformed

    private void asigancionCrearMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_asigancionCrearMenuActionPerformed
        rform = new Relationform(1);
        System.out.println("crear Asignacion");
        rform.setVisible(true);
    }//GEN-LAST:event_asigancionCrearMenuActionPerformed

    private void AsignacionEditarMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AsignacionEditarMenuActionPerformed
        System.out.println("Editando curso ");
        boolean succesful = true;
        Asignacion aux = null;

        if (this.jTable1.getModel().getRowCount() > 0) {
            int index = this.jTable1.getSelectedRow();
            String n_alumno = (String) model.getValueAt(index, 0);
            String n_curso = (String) model.getValueAt(index, 1);
            if (cursoalumno != null && !cursoalumno.isEmpty()) {
                if (cursoalumno.containsKey(n_alumno+n_curso)) {
                    try (Socket socket = new Socket("127.0.0.1", Server.PORT)) {
                        ObjectOutputStream dos = new ObjectOutputStream(socket.getOutputStream());
                        ObjectInputStream is = new ObjectInputStream(socket.getInputStream());

                        dos.writeInt(Server.ASIGNACION);
                        dos.writeInt(Server.FIND);
                        CursoAlumno ca = cursoalumno.get(n_alumno+n_curso);
                        
                        dos.writeInt(ca.getAlumnoID());
                        dos.writeInt(ca.getCursoID());
                        dos.flush();
                        aux = (Asignacion) is.readObject();
                        is.close();
                        dos.close();

                    } catch (IOException ex) {
                        System.out.println(ex.getMessage());
                        System.out.println(ex.getClass());
                        System.out.println(ex.getCause());
                        succesful = false;
                    } catch (ClassNotFoundException ex) {
                        System.out.println(ex.getMessage());
                        System.out.println(ex.getClass());
                        System.out.println(ex.getCause());
                    } finally {
                        if (succesful && aux != null) {
                            rform = new Relationform(2);
                            System.out.println("crear asignacion");
                            rform.setAsignacion(aux);
                            rform.setVisible(true);
                        }
                    }
                }
            }

        }
    }//GEN-LAST:event_AsignacionEditarMenuActionPerformed

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new main().setVisible(true);
            }
        });
    }
    
    private HashMap<String,CursoAlumno> cursoalumno;
    private Relationform rform;
    private Applicationform appform;
    private Cursoform cform;
    private DefaultTableModel model ;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem AlumnoEditarMenu;
    private javax.swing.JMenuItem AsignacionEditarMenu;
    private javax.swing.JMenuItem CursoEditarMenu;
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JMenuItem alumnoCrearMenu;
    private javax.swing.JMenuItem asigancionCrearMenu;
    private javax.swing.JMenuItem asignacionListar;
    private javax.swing.JMenuItem copyMenuItem;
    private javax.swing.JMenu crearMenu;
    private javax.swing.JMenuItem cursoCrearMenu;
    private javax.swing.JMenuItem cutMenuItem;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenu editarJmenu;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenu jMenu7;
    private javax.swing.JMenu jMenu8;
    private javax.swing.JMenu jMenu9;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JMenuItem listarAlumno;
    private javax.swing.JMenuItem listarCurso;
    private javax.swing.JMenu listarMenu;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem pasteMenuItem;
    // End of variables declaration//GEN-END:variables

}
